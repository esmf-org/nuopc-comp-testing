name: NUOPC Component Testing Action
author: Ufuk Turuncoglu (ESMF/CGD/NCAR)
description: Tests given earth system model component in a isolated way forced by data component
inputs:
  app_install_dir:
    description: installation directory for apps such as components
    required: false
    default: ${{ github.workspace }}/app
  architecture:
    description: spack target architecture
    required: false
    default: x86_64_v4
  component_name:
    description: component name
    required: false
    default: ${{ github.event.repository.name }}
  component_build:
    description: component build script
    required: true
  component_module_name:
    description: name of the component module
    required: true
  data_component_name:
    description: data component name
    required: false
    default: datm
  dependencies:
    description: list of packages to install
    required: true
  dependencies_install_dir:
    description: spack dependency installation directory
    required: false
    default: ~/.spack-ci
  test_definition:
    description: YAML file that describes the test
    required: true

runs:
  using: "composite"
  steps:
    # checkout base repository
    - name: Checkout Component Repository
      uses: actions/checkout@v3
      with:
        path: ${{ inputs.app_install_dir }}/${{ inputs.component_name }}

    # prepare core environment
    - name: Install Core Development Tools
      run: |
        sudo apt-get update
        sudo apt-get install tar unzip file gringo
        sudo apt-get install build-essential binutils-dev gfortran
        sudo apt-get install python3-dev python3-boto3 python3-yaml
        sudo apt-get install wget awscli ca-certificates gh
      shell: bash

    # concretize dependencies
    - name: Concretize Spack Environment Using YAML Specification
      id: concretize-deps
      run: |
        $GITHUB_ACTION_PATH/scripts/concretize_deps.sh \
          -a ${{ inputs.architecture }} \
          -d $(echo "${{ inputs.dependencies }}" | awk '$1=$1' RS= OFS=,) \
          -i ${{ inputs.dependencies_install_dir }} \
          -r $GITHUB_WORKSPACE
      shell: bash

    # restore dependencies from cache
    - name: Restore Dependencies
      id: restore-deps 
      uses: actions/cache@v3
      with:
        path: ${{ inputs.dependencies_install_dir }} 
        key: spack-${{ runner.os }}-${{ inputs.architecture }}-${{ hashFiles('**/spack.lock') }}
        restore-keys: |
          spack-${{ runner.os }}-${{ inputs.architecture }}-${{ hashFiles('**/spack.lock') }}

    # install dependencies
    - name: Install Dependencies with Spack 
      id: install-deps
      run: |
        $GITHUB_ACTION_PATH/scripts/install_deps.sh \
          -r $GITHUB_WORKSPACE
      shell: bash

    # checkout data models
    - name: Checkout CDEPS
      uses: actions/checkout@v3
      with:
        repository: uturuncoglu/CDEPS
        path: ${{ inputs.app_install_dir }}/cdeps
        ref: hotfix/std_build

    # build and install data models
    - name: Build and Install CDEPS
      run: |
        export PATH=${{ inputs.dependencies_install_dir }}/view/bin:$PATH
        export ESMFMKFILE=${{ inputs.dependencies_install_dir }}/view/lib/esmf.mk
        export FC=gfortran
        cd ${{ inputs.app_install_dir }}/cdeps
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=${{ inputs.app_install_dir }} \
          -DPIO_C_LIBRARY=${{ inputs.dependencies_install_dir }}/view/lib \
          -DPIO_C_INCLUDE_DIR=${{ inputs.dependencies_install_dir }}/view/include \
          -DPIO_Fortran_LIBRARY=${{ inputs.dependencies_install_dir }}/view/lib \
          -DPIO_Fortran_INCLUDE_DIR=${{ inputs.dependencies_install_dir }}/view/include \
          -DCMAKE_Fortran_FLAGS="-ffree-line-length-none -fallow-argument-mismatch -fallow-invalid-boz" \
          -DDISABLE_FoX=ON ../
        make
        make install
      shell: bash

    # build component
    - name: Build and Install Component
      run: |
        cd ${{ inputs.app_install_dir }}
        echo "${{ inputs.component_build }}" >> install_comp.sh
        chmod 755 install_comp.sh
        ./install_comp.sh
      shell: bash

    # use ESMX generic driver and create executable
    - name: Use ESMX to create executable
      run: |
        $GITHUB_ACTION_PATH/scripts/create_exe.sh \
          -a ${{ inputs.app_install_dir }} \
          -d ${{ inputs.data_component_name }} \
          -i ${{ inputs.dependencies_install_dir }} \
          -m ${{ inputs.component_name }} \
          -n ${{ inputs.component_module_name }}
      shell: bash

    # restore input files from cache
    - name: Restore Input Files From Cache
      id: cache-input
      uses: actions/cache@v3
      with:
        path: ${{ inputs.app_install_dir }}run/INPUT
        key: input-${{ hashFiles('**/file_checksum.lock') }}
        restore-keys: |
            input

    # create run directory and download input
    - name: Download Input Files
      if: steps.cache-input.outputs.cache-hit != 'true'
      run: |
        export PATH=${{ inputs.dependencies_install_dir }}/view/bin:$PATH
        mkdir -p ${{ inputs.app_install_dir }}run/INPUT
        cd ${{ inputs.app_install_dir }}run/INPUT
        python3  $GITHUB_ACTION_PATH/scripts/get_input.py --ifile ${{ inputs.test_definition }} 
      shell: bash

